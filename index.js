import express from "express";
import bodyParser from "body-parser";
import axios from "axios";
import OpenAI from "openai";
import { v4 as uuidv4 } from "uuid";

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 4000;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const ULTRAMSG_INSTANCE_ID = process.env.ULTRAMSG_INSTANCE_ID;
const ULTRAMSG_TOKEN = process.env.ULTRAMSG_TOKEN;
const OPERATOR_PHONE = process.env.OPERATOR_PHONE;
const KASPI_PHONE = process.env.KASPI_PHONE || "77777777777"; // –ù–æ–º–µ—Ä Kaspi –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const deliveryPrice = 700;

// –í–∞–ª–∏–¥–∞—Ü–∏—è env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const requiredEnvVars = [
  'OPENAI_API_KEY', 
  'ULTRAMSG_INSTANCE_ID', 
  'ULTRAMSG_TOKEN', 
  'OPERATOR_PHONE'
];

const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
if (missingVars.length > 0) {
  console.error(`‚ùå Missing required env vars: ${missingVars.join(', ')}`);
  process.exit(1);
}

const openai = new OpenAI({ apiKey: OPENAI_API_KEY });
const sessions = {};

// –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é
const menu = {
  "Doner Classic 30 —Å–º": 1790,
  "Doner Classic 40 —Å–º": 1990,
  "Doner Beef 30 —Å–º": 2090,
  "Doner Beef 40 —Å–º": 2290,
  "Doner Assorti 30 —Å–º": 2090,
  "Doner Assorti 40 —Å–º": 2290,
  "Doner Cheese 30 —Å–º": 1950,
  "Doner Cheese 40 —Å–º": 2150,
  "Doner Crispy 30 —Å–º": 1990,
  "Doner Crispy 40 —Å–º": 2190,
  "Doner Hot 30 —Å–º": 1950,
  "Doner Hot 40 —Å–º": 2150,
  "Panini Classic": 1890,
  "Panini Assorti": 2190,
  "Panini Beef": 2190,
  "Panini Cheese": 2050,
  "Panini Crispy": 2090,
  "Panini Hot": 2050,
  "HOT-DOG": 890,
  "BIG HOT-DOG": 1090,
  "CRUNCH HOT-DOG": 1390,
  "TEXAS HOT-DOG": 1390,
  "–õ–ê–í–ê–® HOT-DOG": 1390,
  "BASKET S": 4090,
  "BASKET M": 5090,
  "BASKET L": 6490,
  "BASKET XL": 7490,
  "–§—Ä–∏": 890,
  "–ù–∞–≥–≥–µ—Ç—Å—ã": 990,
  "–õ—É–∫–æ–≤—ã–µ –∫–æ–ª—å—Ü–∞": 990,
  "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ —à–∞—Ä–∏–∫–∏": 990,
  "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–π": 990,
  "Combo Twin": 6720,
  "Combo Friends": 13240,
  "Box Time": 3980,
  "Coca Cola 0.5L": 590,
  "Coca Cola 1L": 890,
  "–ê–π—Ä–∞–Ω —Ç—É—Ä–µ—Ü–∫–∏–π": 490,
  "Fuse Tea 0.5L": 690,
  "Fuse Tea 1L": 890,
};

function ensureSession(phone) {
  if (!sessions[phone]) {
    sessions[phone] = { 
      cart: [], 
      conversation: [], 
      address: "", 
      paymentMethod: "",
      orderId: "",
      total: 0,
      awaitingAddress: false
    };
  }
  return sessions[phone];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Kaspi —Å—Å—ã–ª–∫–∏
function createKaspiPaymentLink(amount, orderId) {
  // Kaspi deeplink —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  return `https://kaspi.kz/pay/${KASPI_PHONE}?amount=${amount}&comment=–ó–∞–∫–∞–∑_${orderId}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞
function formatReceipt(cart, address, cartTotal, delivery) {
  let receipt = "üßæ *–í–ê–® –ó–ê–ö–ê–ó:*\n\n";
  cart.forEach((item, idx) => {
    receipt += `${idx + 1}. ${item.name} x${item.quantity} = ${item.price * item.quantity}‚Ç∏\n`;
  });
  receipt += `\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: ${delivery}‚Ç∏`;
  receipt += `\nüí∞ *–ò–¢–û–ì–û: ${cartTotal + delivery}‚Ç∏*`;
  receipt += `\nüè† –ê–¥—Ä–µ—Å: ${address}`;
  return receipt;
}

// –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è AI
function buildSystemPrompt(phone) {
  const session = sessions[phone];
  const cartText = session.cart.length
    ? session.cart.map((item, idx) => 
        `${idx + 1}. ${item.name} x${item.quantity} = ${item.price * item.quantity}‚Ç∏`
      ).join("\n")
    : "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞";

  const menuText = Object.entries(menu)
    .map(([name, price]) => `${name}: ${price}‚Ç∏`)
    .join("\n");

  return `–¢—ã ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ñ–µ Ali Doner Aktau.
–ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∞ —è–∑—ã–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ (—Ä—É—Å—Å–∫–∏–π/–∫–∞–∑–∞—Ö—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π).

–í–ê–ñ–ù–û: –¢—ã –¢–û–õ–¨–ö–û –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –∫–ª–∏–µ–Ω—Ç–∞. –ö–æ—Ä–∑–∏–Ω—É –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
1. –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –µ—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç
2. –ü–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞
3. –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ—Å—Ç–∞–≤–µ, —Ä–∞–∑–º–µ—Ä–∞—Ö, –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
4. –ù–ï –≥–æ–≤–æ—Ä–∏ "—è –¥–æ–±–∞–≤–∏–ª" - —Å–∏—Å—Ç–µ–º–∞ –¥–æ–±–∞–≤–∏—Ç —Å–∞–º–∞ –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—à–µ—Ç —á–µ—Ç–∫–æ

–¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:
${cartText}

–ú–µ–Ω—é:
${menuText}

–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryPrice}‚Ç∏

–ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å, —Å–ø—Ä–æ—Å–∏ –∞–¥—Ä–µ—Å –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (Kaspi –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–µ).`;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
function parseOrder(msg) {
  const items = [];
  const normalizedMsg = msg.toLowerCase()
    .replace(/—ë/g, '–µ')
    .replace(/\s+/g, ' ')
    .replace(/—Å–º/g, ' —Å–º')
    .replace(/cm/g, ' —Å–º')
    .trim();
  
  console.log(`üîç Parsing: "${normalizedMsg}"`);
  
  // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–ª—é–¥ –∏–∑ –º–µ–Ω—é
  for (const [itemName, price] of Object.entries(menu)) {
    const normalizedItemName = itemName.toLowerCase()
      .replace(/—ë/g, '–µ')
      .replace(/\s+/g, ' ')
      .trim();
    
    // –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const msgNoSpaces = normalizedMsg.replace(/\s/g, '');
    const itemNoSpaces = normalizedItemName.replace(/\s/g, '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
    if (msgNoSpaces.includes(itemNoSpaces) || normalizedMsg.includes(normalizedItemName)) {
      // –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const quantityPatterns = [
        /(\d+)\s*—à—Ç/i,
        /(\d+)\s*—Ö/i,
        /—Ö\s*(\d+)/i,
        /(\d+)\s+[–∞-—èa-z]/i
      ];
      
      let quantity = 1;
      for (const pattern of quantityPatterns) {
        const match = msg.match(pattern);
        if (match) {
          quantity = parseInt(match[1]);
          break;
        }
      }
      
      console.log(`‚úÖ Found: ${itemName} x${quantity}`);
      
      items.push({
        name: itemName,
        price: price,
        quantity: quantity
      });
      
      break; // –ù–∞—à–ª–∏ –±–ª—é–¥–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
    }
  }
  
  return items;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendMessage(to, text) {
  try {
    let cleanTo = to.replace("@c.us", "");
    if (cleanTo.length === 10) {
      cleanTo = `7${cleanTo}`;
    } else if (cleanTo.length === 11 && cleanTo.startsWith('8')) {
      cleanTo = `7${cleanTo.slice(1)}`;
    }
    
    const payload = new URLSearchParams({
      token: ULTRAMSG_TOKEN,
      to: cleanTo,
      body: text
    }).toString();
    
    const response = await axios.post(
      `https://api.ultramsg.com/${ULTRAMSG_INSTANCE_ID}/messages/chat`,
      payload,
      { 
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        timeout: 10000
      }
    );
    
    console.log(`‚úÖ Message sent to ${cleanTo}`);
    return response.data;
  } catch (err) {
    console.error("‚ùå sendMessage error:", err.response?.data || err.message);
    throw err;
  }
}

// AI –æ—Ç–≤–µ—Ç
async function getAIResponse(msg, phone) {
  const session = ensureSession(phone);
  
  session.conversation.push({ role: "user", content: msg });
  if (session.conversation.length > 20) {
    session.conversation = session.conversation.slice(-10);
  }
  
  const systemPrompt = buildSystemPrompt(phone);
  const recentMessages = session.conversation.slice(-6);
  
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: systemPrompt }, 
        ...recentMessages
      ],
      temperature: 0.7,
      max_tokens: 500,
    });
    
    const reply = completion.choices[0].message.content.trim();
    session.conversation.push({ role: "assistant", content: reply });
    return reply;
  } catch (err) {
    console.error("‚ùå OpenAI error:", err.response?.data || err.message);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
  }
}

// ====== Webhook WhatsApp ======
app.post("/webhook-whatsapp", async (req, res) => {
  try {
    const data = req.body?.data;
    if (!data) return res.sendStatus(200);

    const msg = data.body?.trim();
    const from = data.from;

    if (data.fromMe || !msg) return res.sendStatus(200);

    const session = ensureSession(from);
    const lowerMsg = msg.toLowerCase();

    console.log(`üì® Message from ${from}: ${msg}`);

    // === –ö–û–ú–ê–ù–î–ê: –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É ===
    if (lowerMsg === "–æ—á–∏—Å—Ç–∏—Ç—å" || lowerMsg === "–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É") {
      session.cart = [];
      await sendMessage(from, "üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å?");
      return res.sendStatus(200);
    }

    // === –ö–û–ú–ê–ù–î–ê: –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É ===
    if (lowerMsg === "–∫–æ—Ä–∑–∏–Ω–∞" || lowerMsg === "–º–æ—è –∫–æ—Ä–∑–∏–Ω–∞") {
      if (session.cart.length === 0) {
        await sendMessage(from, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
      } else {
        const cartText = session.cart.map((item, idx) => 
          `${idx + 1}. ${item.name} x${item.quantity} = ${item.price * item.quantity}‚Ç∏`
        ).join("\n");
        const total = session.cart.reduce((sum, i) => sum + i.price * i.quantity, 0);
        await sendMessage(from, `üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n${cartText}\n\nüí∞ –°—É–º–º–∞: ${total}‚Ç∏`);
      }
      return res.sendStatus(200);
    }

    // === –ü–ê–†–°–ò–ù–ì –ó–ê–ö–ê–ó–ê (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥) ===
    if (!lowerMsg.includes("–æ—Ñ–æ—Ä–º") && !lowerMsg.includes("–≥–æ—Ç–æ–≤") && 
        !lowerMsg.includes("–º–µ–Ω—é") && !session.awaitingAddress) {
      
      const parsedItems = parseOrder(msg);
      if (parsedItems.length > 0) {
        parsedItems.forEach(item => {
          const existingItem = session.cart.find(i => i.name === item.name);
          if (existingItem) {
            existingItem.quantity += item.quantity;
          } else {
            session.cart.push(item);
          }
        });
        
        const cartText = session.cart.map((item, idx) => 
          `${idx + 1}. ${item.name} x${item.quantity}`
        ).join("\n");
        const total = session.cart.reduce((sum, i) => sum + i.price * i.quantity, 0);
        
        await sendMessage(from, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n${cartText}\n\nüí∞ –°—É–º–º–∞: ${total}‚Ç∏\n\n–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑?`);
        return res.sendStatus(200);
      }
    }

    // === –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===
    if (lowerMsg.includes("–æ—Ñ–æ—Ä–º") || lowerMsg.includes("–∑–∞–∫–∞–∑") || 
        lowerMsg.includes("–≥–æ—Ç–æ–≤") || lowerMsg.includes("–æ–ø–ª–∞—Ç")) {
      
      if (session.cart.length === 0) {
        await sendMessage(from, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.");
        return res.sendStatus(200);
      }

      if (!session.address) {
        session.awaitingAddress = true;
        await sendMessage(from, "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:");
        return res.sendStatus(200);
      }

      // –°–ø—Ä–æ—Å–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
      await sendMessage(from, "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n\n1Ô∏è‚É£ Kaspi –ø–µ—Ä–µ–≤–æ–¥\n2Ô∏è‚É£ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n–ù–∞–ø–∏—à–∏—Ç–µ: *Kaspi* –∏–ª–∏ *–ù–∞–ª–∏—á–Ω—ã–µ*");
      return res.sendStatus(200);
    }

    // === –°–û–•–†–ê–ù–ï–ù–ò–ï –ê–î–†–ï–°–ê ===
    if (session.awaitingAddress && !session.address) {
      session.address = msg;
      session.awaitingAddress = false;
      await sendMessage(from, `‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${msg}\n\nüí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n\n1Ô∏è‚É£ Kaspi –ø–µ—Ä–µ–≤–æ–¥\n2Ô∏è‚É£ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏`);
      return res.sendStatus(200);
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –û–ü–õ–ê–¢–´ ===
    if (lowerMsg.includes("kaspi") || lowerMsg.includes("–∫–∞—Å–ø–∏")) {
      if (session.cart.length === 0) {
        await sendMessage(from, "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
        return res.sendStatus(200);
      }
      if (!session.address) {
        await sendMessage(from, "üìç –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏");
        return res.sendStatus(200);
      }

      const cartTotal = session.cart.reduce((sum, i) => sum + i.price * i.quantity, 0);
      const total = Math.round(cartTotal + deliveryPrice);
      const orderId = uuidv4().slice(0, 8);

      session.orderId = orderId;
      session.total = total;
      session.paymentMethod = "Kaspi";

      const receipt = formatReceipt(session.cart, session.address, cartTotal, deliveryPrice);
      const paymentLink = createKaspiPaymentLink(total, orderId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫
      await sendMessage(from, receipt);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ–ø–ª–∞—Ç–µ —Å –†–ê–ë–û–ß–ï–ô —Å—Å—ã–ª–∫–æ–π
      const paymentMessage = `
üí≥ *–û–ü–õ–ê–¢–ê –ß–ï–†–ï–ó KASPI*

üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *${total}‚Ç∏*
üì± –ù–æ–º–µ—Ä Kaspi: *${KASPI_PHONE}*
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *–ó–∞–∫–∞–∑ ${orderId}*

*–í–ê–ñ–ù–û:* –û—Ç–∫—Ä–æ–π—Ç–µ Kaspi –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí –ü–µ—Ä–µ–≤–æ–¥—ã ‚Üí —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã—à–µ ‚Üí —Å—É–º–º—É ${total}‚Ç∏ ‚Üí –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: –ó–∞–∫–∞–∑ ${orderId}

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å—Å—ã–ª–∫—É: ${paymentLink}

‚è∞ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 25-35 –º–∏–Ω—É—Ç
üìû –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: *#${orderId}*`;

      await sendMessage(from, paymentMessage);

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
      const operatorMsg = `üì¶ *–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderId}*\n–û—Ç: ${from}\n–û–ø–ª–∞—Ç–∞: Kaspi\n\n${receipt}`;
      await sendMessage(OPERATOR_PHONE, operatorMsg);

      return res.sendStatus(200);
    }

    if (lowerMsg.includes("–Ω–∞–ª–∏—á–Ω") || lowerMsg.includes("–Ω–∞–ª–∏—á")) {
      if (session.cart.length === 0) {
        await sendMessage(from, "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
        return res.sendStatus(200);
      }
      if (!session.address) {
        await sendMessage(from, "üìç –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏");
        return res.sendStatus(200);
      }

      const cartTotal = session.cart.reduce((sum, i) => sum + i.price * i.quantity, 0);
      const total = Math.round(cartTotal + deliveryPrice);
      const orderId = uuidv4().slice(0, 8);

      session.orderId = orderId;
      session.total = total;
      session.paymentMethod = "–ù–∞–ª–∏—á–Ω—ã–µ";

      const receipt = formatReceipt(session.cart, session.address, cartTotal, deliveryPrice);
      
      await sendMessage(from, `${receipt}\n\nüíµ *–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏*\nüìû –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: *#${orderId}*\n‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 25-35 –º–∏–Ω—É—Ç`);

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
      const operatorMsg = `üì¶ *–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderId}*\n–û—Ç: ${from}\n–û–ø–ª–∞—Ç–∞: –ù–∞–ª–∏—á–Ω—ã–µ\n\n${receipt}`;
      await sendMessage(OPERATOR_PHONE, operatorMsg);

      return res.sendStatus(200);
    }

    // === AI –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø ===
    const reply = await getAIResponse(msg, from);
    await sendMessage(from, reply);

    res.sendStatus(200);
  } catch (error) {
    console.error("‚ùå Webhook error:", error);
    res.status(500).send("Internal Server Error");
  }
});

app.get("/status", (req, res) => {
  res.json({ 
    status: "ok", 
    sessions: Object.keys(sessions).length,
    timestamp: new Date().toISOString()
  });
});

app.listen(PORT, () => {
  console.log(`‚úÖ WhatsApp Bot running on port ${PORT}`);
  console.log(`üìû Operator phone: ${OPERATOR_PHONE}`);
  console.log(`üí≥ Kaspi phone: ${KASPI_PHONE}`);
  console.log(`üõçÔ∏è  Menu items: ${Object.keys(menu).length}`);
});