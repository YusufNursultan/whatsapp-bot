import express from "express";
import bodyParser from "body-parser";
import axios from "axios";
import OpenAI from "openai";

// ‚öôÔ∏è Express app
const app = express();
app.use(bodyParser.json());

// ====== CONFIG ======
const PORT = process.env.PORT || 4000;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const ULTRAMSG_INSTANCE_ID = process.env.ULTRAMSG_INSTANCE_ID;
const ULTRAMSG_TOKEN = process.env.ULTRAMSG_TOKEN;
const OPERATOR_PHONE = process.env.OPERATOR_PHONE;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!OPENAI_API_KEY || !ULTRAMSG_INSTANCE_ID || !ULTRAMSG_TOKEN) {
  console.error("‚ùå Missing required env vars. Check Render environment settings.");
  process.exit(1);
}

// ====== OpenAI init ======
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// ====== In-memory sessions ======
const sessions = {}; // { phone: { conversation: [], cart: [], seen:Set, seenQueue:[] } }

function ensureSession(from) {
  if (!sessions[from]) {
    sessions[from] = { conversation: [], cart: [], seen: new Set(), seenQueue: [] };
  }
  return sessions[from];
}

function markSeen(session, messageId) {
  if (!messageId) return;
  session.seen.add(messageId);
  session.seenQueue.push(messageId);
  if (session.seenQueue.length > 500) {
    const old = session.seenQueue.shift();
    session.seen.delete(old);
  }
}

// ====== Menu ======
const menu = {
  "Doner Classic 30 —Å–º": 1790,
  "Doner Classic 40 —Å–º": 1990,
  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
};
const deliveryPrice = 700;

// ====== System prompt ======
function buildSystemPrompt(phone) {
  const cart = sessions[phone]?.cart || [];
  const cartText = cart.length
    ? `–ö–æ—Ä–∑–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:\n${cart
        .map((i, idx) => `${idx + 1}. ${i.name} x${i.quantity} = ${i.price * i.quantity}‚Ç∏`)
        .join("\n")}\n\n–°—É–º–º–∞ (–±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏): ${cart.reduce((s, i) => s + i.price * i.quantity, 0)}‚Ç∏`
    : "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.";

  const menuText = Object.entries(menu)
    .map(([k, v]) => `- ${k}: ${v}‚Ç∏`)
    .join("\n");

  return `
–¢—ã ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ñ–µ "Ali Doner Aktau". –ì–æ–≤–æ—Ä–∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ üçîüåØüçüüöö.
–ó–∞–¥–∞—á–∞ ‚Äî –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ WhatsApp –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É.

–ü–†–ê–í–ò–õ–ê:
1) –ü–æ–∫–∞–∑—ã–≤–∞–π –º–µ–Ω—é –ø–æ –∑–∞–ø—Ä–æ—Å—É "–º–µ–Ω—é".
2) –î–æ–±–∞–≤–ª—è–π –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É, —É—Ç–æ—á–Ω—è–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
3) –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.
4) –ü—Ä–æ—Å–∏ –∞–¥—Ä–µ—Å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
5) –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –≤—ã–≤–µ–¥–∏ —á–µ–∫: —Å—É–º–º–∞ –µ–¥—ã, –¥–æ—Å—Ç–∞–≤–∫–∞ ${deliveryPrice}‚Ç∏, –∞–¥—Ä–µ—Å, –∏—Ç–æ–≥.
6) –ù–µ –Ω–∞—á–∏–Ω–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è.

–ú–ï–ù–Æ:
${menuText}

–î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryPrice}‚Ç∏
${cartText}
  `.trim();
}

// ====== sendMessage ======
async function sendMessage(to, text) {
  try {
    // üîß –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const cleanTo = to.replace('@c.us', ''); // –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å
    
    const payload = new URLSearchParams({
      token: ULTRAMSG_TOKEN,
      to: cleanTo,
      body: text,
    }).toString();

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ ${cleanTo}: ${text.substring(0, 50)}...`);

    const resp = await axios.post(
      `https://api.ultramsg.com/${ULTRAMSG_INSTANCE_ID}/messages/chat`,
      payload,
      { 
        headers: { "Content-Type": "application/x-www-form-urlencoded" }, 
        timeout: 15000 
      }
    );

    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—Ç–≤–µ—Ç UltraMSG:", resp.data);

    const sentId = resp.data?.id || resp.data?.messageId;
    if (sentId) {
      const session = ensureSession(to);
      markSeen(session, sentId);
    }

    return resp.data;
  } catch (err) {
    console.error("‚ùå sendMessage error:", err?.response?.data || err.message);
    throw err; // üîß –í–∞–∂–Ω–æ: –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
  }
}

// ====== getAIResponse ======
async function getAIResponse(userMessage, phone) {
  const session = ensureSession(phone);
  session.conversation.push({ role: "user", content: userMessage });

  const system = buildSystemPrompt(phone);
  const recent = session.conversation.slice(-7);

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "system", content: system }, ...recent],
      temperature: 0.7,
      max_tokens: 800,
    });

    const reply = completion.choices[0].message.content.trim();
    session.conversation.push({ role: "assistant", content: reply });
    return reply;
  } catch (err) {
    console.error("‚ùå OpenAI error:", err?.response?.data || err.message);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  }
}

// ====== Webhook ======
app.post("/webhook-whatsapp", async (req, res) => {
  console.log("üü¢ Webhook –≤—ã–∑–≤–∞–Ω!");

  const data = req.body;
  console.log("üì¶ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ webhook:", JSON.stringify(data, null, 2));

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: UltraMSG –∏—Å–ø–æ–ª—å–∑—É–µ—Ç data.data –≤–º–µ—Å—Ç–æ data.message
  if (!data || !data.data) {
    console.log("üì® Webhook ping received (no message data)");
    return res.sendStatus(200);
  }

  const messageData = data.data;
  const from = messageData.from; // –ù–∞–ø—Ä–∏–º–µ—Ä: "77718526794@c.us"
  const text = messageData.body?.trim();
  const isFromMe = messageData.fromMe;

  console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ: from=${from}, text="${text}", fromMe=${isFromMe}`);

  // üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∞–º–∏–º –±–æ—Ç–æ–º
  if (isFromMe) {
    console.log("‚è© –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç–æ–º");
    return res.sendStatus(200);
  }

  // üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!text) {
    console.log("‚è© –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º");
    return res.sendStatus(200);
  }

  console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    console.log("ü§ñ –ó–∞–ø—Ä–æ—Å –∫ OpenAI...");
    const reply = await getAIResponse(text, from);
    console.log("‚úÖ –û—Ç–≤–µ—Ç AI –ø–æ–ª—É—á–µ–Ω:", reply.substring(0, 100) + "...");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ UltraMSG...");
    await sendMessage(from, reply);
    console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
  }

  res.sendStatus(200);
});
// ====== Health check ======
app.get("/", (req, res) => {
  res.json({ status: "ok", ts: new Date().toISOString() });
});

// ====== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ======
app.listen(PORT, () => {
  console.log(`‚úÖ WhatsApp Bot running on port ${PORT}`);
  console.log(`‚ÑπÔ∏è Health check: http://localhost:${PORT}/`);
});