import express from "express";
import axios from "axios";
import bodyParser from "body-parser";
import 'dotenv/config';

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 3000;
const ULTRAMSG_INSTANCE_ID = process.env.ULTRAMSG_INSTANCE_ID;
const ULTRAMSG_TOKEN = process.env.ULTRAMSG_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPERATOR_NUMBER = process.env.OPERATOR_NUMBER;

// üß† –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const sessions = {};
const userStages = {};
const userOrders = {};
const userAddresses = {};
const userPhones = {};
const userTotals = {};

// üçî –ú–µ–Ω—é
const menu = {
  "Doner Classic 30 —Å–º": 1790,
  "Doner Classic 40 —Å–º": 1990,
  "Doner Beef 30 —Å–º": 2090,
  "Doner Beef 40 —Å–º": 2290,
  "Doner Assorti 30 —Å–º": 2090,
  "Doner Assorti 40 —Å–º": 2290,
  "Doner Cheese 30 —Å–º": 1950,
  "Doner Cheese 40 —Å–º": 2150,
  "Doner Crispy 30 —Å–º": 1990,
  "Doner Crispy 40 —Å–º": 2190,
  "Doner Hot 30 —Å–º": 1950,
  "Doner Hot 40 —Å–º": 2150,
  "Panini Classic": 1890,
  "Panini Assorti": 2190,
  "Panini Beef": 2190,
  "Panini Cheese": 2050,
  "Panini Crispy": 2090,
  "Panini Hot": 2050,
  "HOT-DOG": 890,
  "BIG HOT-DOG": 1090,
  "CRUNCH HOT-DOG": 1390,
  "TEXAS HOT-DOG": 1390,
  "–õ–ê–í–ê–® HOT-DOG": 1390,
  "BASKET S": 4090,
  "BASKET M": 5090,
  "BASKET L": 6490,
  "BASKET XL": 7490,
  "–§—Ä–∏": 890,
  "–ù–∞–≥–≥–µ—Ç—Å—ã": 990,
  "–õ—É–∫–æ–≤—ã–µ –∫–æ–ª—å—Ü–∞": 990,
  "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ —à–∞—Ä–∏–∫–∏": 990,
  "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–π": 990,
  "Combo Twin": 6720,
  "Combo Friends": 13240,
  "Box Time": 3980,
  "Coca Cola 0.5L": 590,
  "Coca Cola 1L": 890,
  "–ê–π—Ä–∞–Ω —Ç—É—Ä–µ—Ü–∫–∏–π": 490,
  "Fuse Tea 0.5L": 690,
  "Fuse Tea 1L": 890,
};

// üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendMessage(to, body) {
  try {
    await axios.post(`https://api.ultramsg.com/${ULTRAMSG_INSTANCE_ID}/messages/chat`, {
      token: ULTRAMSG_TOKEN,
      to,
      body,
    });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e.response?.data || e.message);
  }
}

// üí≥ –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
async function sendPaymentButtons(to, total) {
  const message = `
üí∞ –¢”©–ª–µ–º —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:
1Ô∏è‚É£ Kaspi (${total}‚Ç∏)
2Ô∏è‚É£ –ù–∞–ª–∏—á–Ω—ã–µ
3Ô∏è‚É£ Halyk
`;
  await sendMessage(to, message);
}

// üí≥ –°—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã
const PAYMENT_LINKS = {
  Kaspi: "https://pay.kaspi.kz/pay/3ofujmgr",
  Halyk: "https://halykbank.kz/pay/your_shop_id",
};

// üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫
app.post("/webhook", async (req, res) => {
  const data = req.body?.data;
  if (!data || !data.from || !data.body) return res.sendStatus(200);

  const from = data.from;
  const text = data.body.trim();
  const isFromMe = data.fromMe;

  if (isFromMe) return res.sendStatus(200);

  console.log(`üì© ${from}: ${text}`);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  if (!userStages[from]) userStages[from] = "start";

  // === –≠–¢–ê–ü–´ ===

  // 1Ô∏è‚É£ –ù–∞—á–∞–ª–æ
  if (userStages[from] === "start") {
    await sendMessage(from, "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! –ë“±–ª - Ali Doner –ê“õ—Ç–∞—É üçî\n–¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:");
    userStages[from] = "ordering";
    userOrders[from] = [];
    return res.sendStatus(200);
  }

  // 2Ô∏è‚É£ –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑—ã
  if (userStages[from] === "ordering") {
    const found = Object.keys(menu).find(item => text.toLowerCase().includes(item.toLowerCase().split(" ")[0]));
    if (found) {
      userOrders[from].push({ name: found, qty: 1 });
      await sendMessage(from, `–°—ñ–∑ "${found}" —Ç–∞“£–¥–∞–¥—ã“£—ã–∑. “ö–∞–Ω—à–∞ –¥–∞–Ω–∞?`);
      userStages[from] = "waiting_qty";
      return res.sendStatus(200);
    } else {
      await sendMessage(from, "–ú–µ–Ω—é–¥–∞–Ω —Ç–∞“£–¥–∞“£—ã–∑ (–º—ã—Å–∞–ª—ã: Doner Classic 30 —Å–º).");
      return res.sendStatus(200);
    }
  }

  // 3Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
  if (userStages[from] === "waiting_qty") {
    const qty = parseInt(text);
    if (isNaN(qty) || qty <= 0) {
      await sendMessage(from, "“ö–∞–Ω—à–∞ –¥–∞–Ω–∞ –µ–∫–µ–Ω—ñ–Ω –∂–∞–∑—ã“£—ã–∑ (–º—ã—Å–∞–ª—ã: 2)");
      return res.sendStatus(200);
    }
    userOrders[from][userOrders[from].length - 1].qty = qty;
    await sendMessage(from, "–ñ–µ—Ç–∫—ñ–∑—É –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω –∂–∞–∑—ã“£—ã–∑ (–º—ã—Å–∞–ª—ã: 12–º–∫—Ä 47“Ø–π 72–ø”ô—Ç–µ—Ä)");
    userStages[from] = "waiting_address";
    return res.sendStatus(200);
  }

  // 4Ô∏è‚É£ –ê–¥—Ä–µ—Å
  if (userStages[from] === "waiting_address") {
    if (!/\d/.test(text)) {
      await sendMessage(from, "–ú–µ–∫–µ–Ω–∂–∞–π —Ç“Ø—Å—ñ–Ω—ñ–∫—Å—ñ–∑. “ö–∞–π—Ç–∞ –∂–∞–∑—ã“£—ã–∑ (–º—ã—Å–∞–ª—ã: 12–º–∫—Ä 47“Ø–π 72–ø”ô—Ç–µ—Ä)");
      return res.sendStatus(200);
    }
    userAddresses[from] = text;
    await sendMessage(from, "–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑ (–º—ã—Å–∞–ª—ã: 87771234567)");
    userStages[from] = "waiting_phone";
    return res.sendStatus(200);
  }

  // 5Ô∏è‚É£ –¢–µ–ª–µ—Ñ–æ–Ω
  if (userStages[from] === "waiting_phone") {
    if (!/^\d{11}$/.test(text)) {
      await sendMessage(from, "–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ “õ–∞—Ç–µ. –ú—ã—Å–∞–ª—ã: 87771234567");
      return res.sendStatus(200);
    }
    userPhones[from] = text;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫
    const order = userOrders[from];
    const total = order.reduce((sum, i) => sum + (menu[i.name] || 0) * i.qty, 0);
    userTotals[from] = total;

    const receipt = `
‚úÖ –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑:
${order.map(i => `- ${i.name} √ó${i.qty} ‚Äî ${(menu[i.name] || 0) * i.qty}‚Ç∏`).join("\n")}
–ñ–∞–ª–ø—ã: ${total}‚Ç∏  
–ú–µ–∫–µ–Ω–∂–∞–π: ${userAddresses[from]}  
–¢–µ–ª–µ—Ñ–æ–Ω: ${userPhones[from]}  
–ë–æ–ª–∂–∞“ì–∞–Ω –∂–µ—Ç–∫—ñ–∑—É —É–∞“õ—ã—Ç—ã: 35 –º–∏–Ω—É—Ç  
`;

    await sendMessage(from, receipt);
    await sendPaymentButtons(from, total);
    userStages[from] = "waiting_payment";
    return res.sendStatus(200);
  }

  // 6Ô∏è‚É£ –û–ø–ª–∞—Ç–∞
  if (userStages[from] === "waiting_payment") {
    if (/kaspi/i.test(text)) {
      await sendMessage(from, `Kaspi –∞—Ä“õ—ã–ª—ã —Ç”©–ª–µ—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑:\n${PAYMENT_LINKS.Kaspi}`);
      await sendMessage(from, "–¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! –†–∞“õ–º–µ—Ç ‚ù§Ô∏è");
      await sendMessage(OPERATOR_NUMBER, `üìã Kaspi —Ç”©–ª–µ–º—ñ –∞—Ä“õ—ã–ª—ã –∂–∞“£–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å:\n${JSON.stringify(userOrders[from], null, 2)}\n–ú–µ–∫–µ–Ω–∂–∞–π: ${userAddresses[from]}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${userPhones[from]}\n–ñ–∞–ª–ø—ã: ${userTotals[from]}‚Ç∏`);
      userStages[from] = "done";
      return res.sendStatus(200);
    }

    if (/halyk/i.test(text)) {
      await sendMessage(from, `Halyk –∞—Ä“õ—ã–ª—ã —Ç”©–ª–µ—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑:\n${PAYMENT_LINKS.Halyk}`);
      await sendMessage(from, "–¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! –†–∞“õ–º–µ—Ç ‚ù§Ô∏è");
      await sendMessage(OPERATOR_NUMBER, `üìã Halyk —Ç”©–ª–µ–º—ñ –∞—Ä“õ—ã–ª—ã –∂–∞“£–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å:\n${JSON.stringify(userOrders[from], null, 2)}\n–ú–µ–∫–µ–Ω–∂–∞–π: ${userAddresses[from]}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${userPhones[from]}\n–ñ–∞–ª–ø—ã: ${userTotals[from]}‚Ç∏`);
      userStages[from] = "done";
      return res.sendStatus(200);
    }

    if (/–Ω–∞–ª/i.test(text) || /“õ–æ–ª–º–∞/i.test(text)) {
      await sendMessage(from, "‚úÖ –ù–∞–ª–∏—á–Ω—ã–µ–º–µ–Ω —Ç”©–ª–µ–º “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã. –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ ”©“£–¥–µ—É–¥–µ ‚ù§Ô∏è");
      await sendMessage(OPERATOR_NUMBER, `üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (–Ω–∞–ª–∏—á–Ω—ã–µ):\n${JSON.stringify(userOrders[from], null, 2)}\n–ú–µ–∫–µ–Ω–∂–∞–π: ${userAddresses[from]}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${userPhones[from]}\n–ñ–∞–ª–ø—ã: ${userTotals[from]}‚Ç∏`);
      userStages[from] = "done";
      return res.sendStatus(200);
    }

    await sendMessage(from, "–¢”©–ª–µ–º —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑: Kaspi / –ù–∞–ª–∏—á–Ω—ã–µ / Halyk");
    return res.sendStatus(200);
  }

  // 7Ô∏è‚É£ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  if (userStages[from] === "done") {
    userStages[from] = "start";
    await sendMessage(from, "–ñ–∞“£–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å –±–µ—Ä–µ –∞–ª–∞—Å—ã–∑ üòä");
    return res.sendStatus(200);
  }

  res.sendStatus(200);
});

// üåê –ü—Ä–æ–≤–µ—Ä–∫–∞
app.get("/", (req, res) => res.send("ü§ñ Ali Doner –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"));

app.listen(PORT, () => console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
